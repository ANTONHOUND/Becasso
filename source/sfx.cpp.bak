#include "sfx.h"
#include <MediaDefs.h>
#include <stdio.h>


EffectsPlayer::EffectsPlayer (SoundEffect8_11 *fx)
{
	media_raw_audio_format format;
	format.format = media_raw_audio_format::B_AUDIO_FLOAT;
	format.frame_rate = 11000;
	format.channel_count = 1;
	format.byte_order = 1;
	format.buffer_size = 2048;
	cookie_record cookie;
	cookie.pos = 0;
	cookie.size = fx->size();
	cookie.buf = fx->data();
	cookie.parent = this;
	
	myEffect = fx->sound();
	
//	myPlayer = new BSoundPlayer (&format, "Easter Egg", BufferProc, NULL, &cookie);

//	printf ("bufsize: %ld\n", format.buffer_size);
	myPlayer = new BSoundPlayer (&format, "Easter Egg");
	myPlayer->Start();
	myPlayer->SetVolume (1.0);

}

EffectsPlayer::~EffectsPlayer ()
{
	printf ("~EffectsPlayer\n");
	if (myPlayer)
		myPlayer->Stop (false);
	printf ("Stopped BSoundPlayer...\n");
	delete myPlayer;
	printf ("Deleted BSoundPlayer...\n");
}

void EffectsPlayer::StartEffect ()
{
	printf ("Starting sound effect...\n");
	media_raw_audio_format format = myEffect->Format();
	printf ("format = %ld\n", format.format);
	if (format.format != media_raw_audio_format::B_AUDIO_FLOAT)
		printf ("HEY!!\n");
	myPlayer->StartPlaying (myEffect);

//	myPlayer->Start();
//	myPlayer->SetVolume (1.0);
//	myPlayer->SetHasData (true);
}

void BufferProc (void *theCookie, void *buffer, size_t size, const media_raw_audio_format &format)
{
	printf ("BufferProc\n");
	size_t i, j;
	float *buf = (float *) buffer;
	size_t float_size = size/4;
	uint32 channel_count = format.channel_count;
	cookie_record *cookie = (cookie_record *) theCookie;
	
	if (format.format != media_raw_audio_format::B_AUDIO_FLOAT)
		return;
	
	int32 pos = cookie->pos;
	float_size = MAX (float_size, cookie->size - pos);
	if (float_size)
	{
		for (i = 0; i < float_size; i += channel_count)
		{
		    for (j = 0; j < channel_count; j++)
		    {
	    		buf[i + j] = cookie->buf[pos + i];
	    		printf ("%f\n", buf[i + j]);
		    }
		}
		cookie->pos += float_size;
	}
	else
	{
		cookie->parent->player()->SetHasData (false);
		cookie->parent->player()->Stop();
	}
} 

//===========

SoundEffect8_11::SoundEffect8_11 (void *data, size_t size)
: fSize (size)
{
	media_raw_audio_format format;
	format.format = media_raw_audio_format::B_AUDIO_FLOAT;
	format.frame_rate = 11000;
	format.channel_count = 1;
	format.byte_order = 1;
	format.buffer_size = 4096;
	myData = new float [size];
	unsigned char *cd = (unsigned char *) data;
	for (int i = 0; i < size; i++)
		myData[i] = float (cd[i] - 128)/128.0;
	
	mySound = new BSound (myData, size, format);
	printf ("Constructed BSound (%p, %ld)\n", data, size);
}

SoundEffect8_11::~SoundEffect8_11 ()
{
	printf ("~SE\n");
	delete myData;
}

